From 3460684cb9376d072c98951f0c0efff6bb2ce82e Mon Sep 17 00:00:00 2001
From: Stratos Karafotis <stratosk@semaphore.gr>
Date: Tue, 14 May 2013 21:32:20 +0300
Subject: [PATCH] msm: acpuclock-krait: Add undervolting support

Add undervolting support using 3 module parameters:
- lower_uV: undervolting value for lower frequencies
- upper_uV: undervolting value for upper frequencies
- upper_khz_thers: above this frequency upper_uV will be used. Else
lower_uV will be used.

Undervolting value is subtracted from stock voltage. The final voltage
for each frequency is calulated:
Vdd(final) = Vdd(core) + boost_uV - uV

Also debugfs (acpuclk/acpu_table) is used to show the acpu table
frequencies and voltages.

Signed-off-by: Stratos Karafotis <stratosk@semaphore.gr>
---
 arch/arm/mach-msm/acpuclock-krait.c | 75 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 74 insertions(+), 1 deletion(-)

diff --git a/arch/arm/mach-msm/acpuclock-krait.c b/arch/arm/mach-msm/acpuclock-krait.c
index 12b8039..6b8f005 100644
--- a/arch/arm/mach-msm/acpuclock-krait.c
+++ b/arch/arm/mach-msm/acpuclock-krait.c
@@ -22,6 +22,7 @@
 #include <linux/cpufreq.h>
 #include <linux/cpu.h>
 #include <linux/regulator/consumer.h>
+#include <linux/debugfs.h>
 
 #include <asm/mach-types.h>
 #include <asm/cpu.h>
@@ -47,6 +48,7 @@
 
 static DEFINE_MUTEX(driver_lock);
 static DEFINE_SPINLOCK(l2_lock);
+static int pvs_bin;
 
 static struct drv_data {
 	struct acpu_level *acpu_freq_tbl;
@@ -419,10 +421,18 @@ static inline int calculate_vdd_dig(const struct acpu_level *tgt)
 
 static bool enable_boost = true;
 module_param_named(boost, enable_boost, bool, S_IRUGO | S_IWUSR);
+static unsigned int lower_uV;
+module_param(lower_uV, uint, S_IRUGO | S_IWUSR);
+static unsigned int upper_uV;
+module_param(upper_uV, uint, S_IRUGO | S_IWUSR);
+static unsigned long upper_khz_thres = 1350000;
+module_param(upper_khz_thres, ulong, S_IRUGO | S_IWUSR);
 
 static inline int calculate_vdd_core(const struct acpu_level *tgt)
 {
-	return tgt->vdd_core + (enable_boost ? drv.boost_uv : 0);
+	unsigned int under_uV = (tgt->speed.khz >= upper_khz_thres) ? upper_uV
+								    : lower_uV;
+	return tgt->vdd_core + (enable_boost ? drv.boost_uv : 0) - under_uV;
 }
 
 /* Set the CPU's clock rate and adjust the L2 rate, voltage and BW requests. */
@@ -1001,6 +1011,9 @@ static void __init drv_data_init(struct device *dev,
 	drv.acpu_freq_tbl = kmemdup(params->pvs_tables[tbl_idx].table,
 				    params->pvs_tables[tbl_idx].size,
 				    GFP_KERNEL);
+
+	pvs_bin = tbl_idx;
+
 	BUG_ON(!drv.acpu_freq_tbl);
 	drv.boost_uv = params->pvs_tables[tbl_idx].boost_uv;
 
@@ -1048,6 +1061,64 @@ static void __init hw_init(void)
 	bus_init(l2_level);
 }
 
+static int acpu_table_show(struct seq_file *m, void *unused)
+{
+	const struct acpu_level *level;
+	char *pvs_names[] = { "Slow", "Nominal", "Fast", "Faster", "Unknown" };
+	int under_uV;
+
+	seq_printf(m, "CPU PVS: %s\n", pvs_names[pvs_bin]);
+	seq_printf(m, "Boost uV: %u\n", drv.boost_uv);
+	seq_printf(m, "Boost uV enabled: %s\n", (enable_boost ? "Yes" : "No"));
+	seq_printf(m, "Upper KHZ threshold: %lu\n", upper_khz_thres);
+	seq_printf(m, "Lower under uV: %u\n", lower_uV);
+	seq_printf(m, "Upper under uV: %u\n\n", upper_uV);
+	seq_printf(m, "CPU KHz  VDD(stock)  VDD(final)\n");
+
+	for (level = drv.acpu_freq_tbl; level->speed.khz != 0; level++) {
+		if (!level->use_for_scaling)
+			continue;
+
+		/* CPU speed information */
+		seq_printf(m, "%7lu  ",	level->speed.khz);
+
+		/* Core voltage stock information */
+		seq_printf(m, "%10d  ", level->vdd_core + drv.boost_uv);
+
+		under_uV = (level->speed.khz >= upper_khz_thres) ? upper_uV :
+								   lower_uV;
+		/* Core voltage final information */
+		seq_printf(m, "%10d\n", level->vdd_core +
+				(enable_boost ? drv.boost_uv : 0) - under_uV);
+	}
+
+	return 0;
+}
+
+static int acpu_table_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, acpu_table_show, inode->i_private);
+}
+
+static const struct file_operations acpu_table_fops = {
+	.open		= acpu_table_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= seq_release,
+};
+
+void __init acpuclk_krait_debug_init(void)
+{
+	static struct dentry *base_dir;
+
+	base_dir = debugfs_create_dir("acpuclk", NULL);
+	if (!base_dir)
+		return;
+
+	debugfs_create_file("acpu_table", S_IRUGO, base_dir, NULL,
+				&acpu_table_fops);
+}
+
 int __init acpuclk_krait_init(struct device *dev,
 			      const struct acpuclk_krait_params *params)
 {
@@ -1058,5 +1129,7 @@ int __init acpuclk_krait_init(struct device *dev,
 	acpuclk_register(&acpuclk_krait_data);
 	register_hotcpu_notifier(&acpuclk_cpu_notifier);
 
+	acpuclk_krait_debug_init();
+
 	return 0;
 }
-- 
1.8.1.6

