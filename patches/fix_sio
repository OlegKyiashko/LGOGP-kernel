From eac56e8e502585779a674c9ead3b6dab41f9ed62 Mon Sep 17 00:00:00 2001
From: stratosk <stratosk@semaphore.gr>
Date: Sun, 14 Apr 2013 19:48:52 +0300
Subject: [PATCH] block: Fix checkpatch warnings in SIO

Signed-off-by: Stratos Karafotis <stratosk@semaphore.gr>
---
 block/sio-iosched.c | 71 +++++++++++++++++++++--------------------------------
 1 file changed, 28 insertions(+), 43 deletions(-)

diff --git a/block/sio-iosched.c b/block/sio-iosched.c
index 1fef35a..82945d2 100644
--- a/block/sio-iosched.c
+++ b/block/sio-iosched.c
@@ -19,22 +19,29 @@
 #include <linux/module.h>
 #include <linux/init.h>
 #include <linux/version.h>
-#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,38)
-#include <linux/slab.h>
-#endif
 
 enum { ASYNC, SYNC };
 
 /* Tunables */
-static const int sync_read_expire  = HZ / 2;	/* max time before a sync read is submitted. */
-static const int sync_write_expire = 2 * HZ;	/* max time before a sync write is submitted. */
 
-static const int async_read_expire  =  4 * HZ;	/* ditto for async, these limits are SOFT! */
-static const int async_write_expire = 16 * HZ;	/* ditto for async, these limits are SOFT! */
+/* max time before a sync read is submitted. */
+static const int sync_read_expire  = HZ / 2;
+/* max time before a sync write is submitted. */
+static const int sync_write_expire = 2 * HZ;
 
-static const int writes_starved = 2;		/* max times reads can starve a write */
-static const int fifo_batch     = 8;		/* # of sequential requests treated as one
-						   by the above parameters. For throughput. */
+/* ditto for async, these limits are SOFT! */
+static const int async_read_expire  =  4 * HZ;
+/* ditto for async, these limits are SOFT! */
+static const int async_write_expire = 16 * HZ;
+
+
+/* max times reads can starve a write */
+static const int writes_starved = 2;
+/*
+ * # of sequential requests treated as one
+ * by the above parameters. For throughput.
+ */
+static const int fifo_batch     = 8;
 
 /* Elevator data */
 struct sio_data {
@@ -85,18 +92,6 @@ struct sio_data {
 	list_add_tail(&rq->queuelist, &sd->fifo_list[sync][data_dir]);
 }
 
-#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,38)
-static int
-sio_queue_empty(struct request_queue *q)
-{
-	struct sio_data *sd = q->elevator->elevator_data;
-
-	/* Check if fifo lists are empty */
-	return list_empty(&sd->fifo_list[SYNC][READ]) && list_empty(&sd->fifo_list[SYNC][WRITE]) &&
-	       list_empty(&sd->fifo_list[ASYNC][READ]) && list_empty(&sd->fifo_list[ASYNC][WRITE]);
-}
-#endif
-
 static struct request *
 sio_expired_request(struct sio_data *sd, int sync, int data_dir)
 {
@@ -245,11 +240,7 @@ struct sio_data {
 	return list_entry(rq->queuelist.next, struct request, queuelist);
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(3,5,0)
 static void *
-#else
-static int
-#endif
 sio_init_queue(struct request_queue *q)
 {
 	struct sio_data *sd;
@@ -257,11 +248,7 @@ struct sio_data {
 	/* Allocate structure */
 	sd = kmalloc_node(sizeof(*sd), GFP_KERNEL, q->node);
 	if (!sd)
-#if LINUX_VERSION_CODE < KERNEL_VERSION(3,5,0)
 		return NULL;
-#else
-		return -ENOMEM;
-#endif
 
 	/* Initialize fifo lists */
 	INIT_LIST_HEAD(&sd->fifo_list[SYNC][READ]);
@@ -276,12 +263,8 @@ struct sio_data {
 	sd->fifo_expire[ASYNC][READ] = async_read_expire;
 	sd->fifo_expire[ASYNC][WRITE] = async_write_expire;
 	sd->fifo_batch = fifo_batch;
-#if LINUX_VERSION_CODE < KERNEL_VERSION(3,5,0)
+
 	return sd;
-#else
-	q->elevator->elevator_data = sd;
-	return 0;
-#endif
 }
 
 static void
@@ -335,7 +318,8 @@ static ssize_t __FUNC(struct elevator_queue *e, char *page)		\
 #undef SHOW_FUNCTION
 
 #define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
-static ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)	\
+static ssize_t __FUNC(struct elevator_queue *e, const char *page,	\
+							size_t count)	\
 {									\
 	struct sio_data *sd = e->elevator_data;			\
 	int __data;							\
@@ -350,10 +334,14 @@ static ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)
 		*(__PTR) = __data;					\
 	return ret;							\
 }
-STORE_FUNCTION(sio_sync_read_expire_store, &sd->fifo_expire[SYNC][READ], 0, INT_MAX, 1);
-STORE_FUNCTION(sio_sync_write_expire_store, &sd->fifo_expire[SYNC][WRITE], 0, INT_MAX, 1);
-STORE_FUNCTION(sio_async_read_expire_store, &sd->fifo_expire[ASYNC][READ], 0, INT_MAX, 1);
-STORE_FUNCTION(sio_async_write_expire_store, &sd->fifo_expire[ASYNC][WRITE], 0, INT_MAX, 1);
+STORE_FUNCTION(sio_sync_read_expire_store, &sd->fifo_expire[SYNC][READ], 0,
+								INT_MAX, 1);
+STORE_FUNCTION(sio_sync_write_expire_store, &sd->fifo_expire[SYNC][WRITE], 0,
+								INT_MAX, 1);
+STORE_FUNCTION(sio_async_read_expire_store, &sd->fifo_expire[ASYNC][READ], 0,
+								INT_MAX, 1);
+STORE_FUNCTION(sio_async_write_expire_store, &sd->fifo_expire[ASYNC][WRITE], 0,
+								INT_MAX, 1);
 STORE_FUNCTION(sio_fifo_batch_store, &sd->fifo_batch, 0, INT_MAX, 0);
 STORE_FUNCTION(sio_writes_starved_store, &sd->writes_starved, 0, INT_MAX, 0);
 #undef STORE_FUNCTION
@@ -377,9 +365,6 @@ static ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)
 		.elevator_merge_req_fn		= sio_merged_requests,
 		.elevator_dispatch_fn		= sio_dispatch_requests,
 		.elevator_add_req_fn		= sio_add_request,
-#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,38)
-		.elevator_queue_empty_fn	= sio_queue_empty,
-#endif
 		.elevator_former_req_fn		= sio_former_request,
 		.elevator_latter_req_fn		= sio_latter_request,
 		.elevator_init_fn		= sio_init_queue,
-- 
1.8.1.6

